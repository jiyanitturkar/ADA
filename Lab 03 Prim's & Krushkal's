#include <stdio.h>

void prims(int cost[10][10], int n);
void krushkal(int cost[10][10], int n);
int find(int parent[10], int i);

int cost[10][10], n, t[10][2], sum;

int main() {
    int i, j;

    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter the cost adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    prims(cost, n);
    printf("\nMinimal Spanning Tree using Prim's Algorithm:\n");
    for (i = 0; i < n - 1; i++) {
        printf("(%d, %d)\n", t[i][0], t[i][1]);
    }
    printf("Sum of the Minimal Spanning Tree: %d\n", sum);

    sum = 0;
    krushkal(cost, n);
    printf("\nMinimal Spanning Tree using Kruskal's Algorithm:\n");
    for (i = 0; i < n - 1; i++) {
        printf("(%d, %d)\n", t[i][0], t[i][1]);
    }
    printf("Sum of the Minimal Spanning Tree: %d\n", sum);

    return 0;
}

void prims(int cost[10][10], int n) {
    int i, j, u, v, min, source;
    int p[10], s[10], d[10];
    min = 999;
    source = 0;
    for (i = 0; i < n; i++) {
        d[i] = cost[source][i];
        s[i] = 0;
        p[i] = source;
    }
    s[source] = 1;
    sum = 0;
    int k = 0;
    for (i = 1; i < n; i++) {
        min = 999;
        u = -1;
        for (j = 0; j < n; j++) {
            if (s[j] == 0 && d[j] < min) {
                min = d[j];
                u = j;
            }
        }
        if (u != -1) {
            t[k][0] = u;
            t[k][1] = p[u];
            k++;
            sum += cost[u][p[u]];
            s[u] = 1;

            for (v = 0; v < n; v++) {
                if (s[v] == 0 && cost[u][v] < d[v]) {
                    d[v] = cost[u][v];
                    p[v] = u;
                }
            }
        }
    }
}

void krushkal(int cost[10][10], int n) {
    int i, j, min, u, v, count, k;
    int parent[10];
    for (i = 0; i < n; i++) {
        parent[i] = i;
    }
    count = 0;
    k = 0;
    sum = 0;
    while (count < n - 1) {
        min = 999;
        u = -1;
        v = -1;
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (i != j && cost[i][j] < min && find(parent, i) != find(parent, j)) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }
            }
        }
        if (u != -1 && v != -1) {
            int root_u = find(parent, u);
            int root_v = find(parent, v);

            if (root_u != root_v) {
                parent[root_u] = root_v;
                t[k][0] = u;
                t[k][1] = v;
                sum += min;
                k++;
                count++;
            }
        }
    }
}

int find(int parent[10], int i) {
    if (parent[i] != i) {
        parent[i] = find(parent, parent[i]);
    }
    return parent[i];
}
