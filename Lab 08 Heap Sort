#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void heapify(int a[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && a[left] > a[largest])
        largest = left;

    if (right < n && a[right] > a[largest])
        largest = right;

    if (largest != i) {
        int temp = a[i];
        a[i] = a[largest];
        a[largest] = temp;
        heapify(a, n, largest);
    }
}

void heapSort(int a[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(a, n, i);

    for (int i = n - 1; i > 0; i--) {
        int temp = a[0];
        a[0] = a[i];
        a[i] = temp;

        heapify(a, i, 0);
    }
}

int main() {
    int n, ch = 1;
    while (ch) {
        printf("\nEnter the number of elements to sort: ");
        scanf("%d", &n);

        int *a = (int *)malloc(n * sizeof(int));
        if (a == NULL) {
            printf("Memory allocation failed.\n");
            return 1;
        }

        printf("\nEnter the elements to sort:\n");
        for (int i = 0; i < n; i++)
            scanf("%d", &a[i]);

        clock_t start = clock();
        heapSort(a, n);
        clock_t end = clock();

        printf("\nThe sorted list of elements is:\n");
        for (int i = 0; i < n; i++)
            printf("%d ", a[i]);
        printf("\n");

        double time_taken = (double)(end - start) / CLOCKS_PER_SEC;
        printf("\nTime taken: %lf seconds\n", time_taken);

        free(a);

        printf("Do you wish to run again? (0/1): ");
        scanf("%d", &ch);
    }
    return 0;
}
